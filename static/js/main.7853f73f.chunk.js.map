{"version":3,"sources":["functions/functions.js","class/Point.js","components/DecreasingCanvas.js","components/GridCanvas.js","components/AreaCanvas.js","App.js","index.js"],"names":["module","exports","calculateThreeCircleIntersection","x0","y0","r0","x1","y1","r1","x2","y2","r2","a","dx","dy","d","h","point2_y","Math","sqrt","floor","abs","x","y","getRandomArbitrary","min","max","random","union_arrays","res","i","length","j","point","push","Point","color","this","interval","drawOuterinterval","radius","drawOuter","DecreasingCanvas","props","canvasRef","useRef","useState","points","setPoints","goalPoint","setGoalPoint","draw","ctx","fillStyle","beginPath","arc","dotSize","PI","fill","key","strokeStyle","lineWidth","stroke","movePoint","calculateDistance","pow","calculateDistanceXY","setRadius","clearPointInterval","clearInterval","clearOuterInterval","allFinished","finished","Object","values","item","calculatePoint","maxDistance","errorMargin","getDirection","drawOuterPoint","setOuterInterval","setInterval","onGuessedPosition","radiusSpeed","useEffect","fixedDot","settings","canvasWidth","canvasHeight","boarder","onGoalPosition","calculatedPoints","setPointInterval","speed","keys","canvas","current","context","getContext","width","height","clearRect","entries","ref","GridCanvas","squaresAroundList","setSquaresAroundList","squareUnion","setSquareUnion","drawSquare","fillRect","gridSize","calculateSquare","calculateDistanceSquare","gridDistance","calculateGrid","squarePos","squaresAround","startPos","toCheck","addX","addY","squareList","addToSquareList","calculateGridIntersection","counts","forEach","JSON","stringify","result","parse","guessSquare","guessPos","onAroundList","onGuessedSquare","drawLineGrid","moveTo","lineTo","ceil","AreaCanvas","canvas1","ctx1","reRun","setRerun","list","allPositions","setAllPositions","val","totalRuns","setTotalruns","drawCircle","closePath","drawIntersect","save","globalCompositeOperation","restore","drawImage","calculateArea","pix","getImageData","data","all_positions","onAllPositions","runAgain","document","getElementById","onTotalRuns","id","Button","onClick","App","renderCanvas","renderInfo","canvasSet","setCanvasSet","setSpeed","setRadiusSpeed","setDotsize","setFixedDot","setMaxDistance","setErrorMargin","setGridDistance","setGridSize","guessedPosition","setGuessedPosition","guessedSquare","setGuessedSquare","allPositions2","setAllPositions2","aroundList","setAroundList","pos","runs","sq","Container","Row","Col","sm","Form","Group","Label","Control","value","disabled","toFixed","block","dataStr","encodeURIComponent","downloadAnchorNode","createElement","setAttribute","body","appendChild","click","remove","controlId","as","map","e","join","rows","className","savedState","setTimeout","reload","size","onChange","target","step","Check","type","label","checked","ReactDOM","render"],"mappings":"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","file":"static/js/main.7853f73f.chunk.js","sourcesContent":["function calculateThreeCircleIntersection(x0, y0, r0,\r\n                                                x1, y1, r1,\r\n                                                 x2, y2, r2){\r\n    var a, dx, dy, d, h, rx, ry;\r\n    var point2_x, point2_y;\r\n\r\n    /* dx and dy are the vertical and horizontal distances between\r\n    * the circle centers.\r\n    */\r\n    dx = x1 - x0;\r\n    dy = y1 - y0;\r\n\r\n    /* Determine the straight-line distance between the centers. */\r\n    d = Math.sqrt((dy*dy) + (dx*dx));\r\n\r\n    /* Check for solvability. */\r\n    if (d > (r0 + r1))\r\n    {\r\n        /* no solution. circles do not intersect. */\r\n        return false;\r\n    }\r\n    if (d < Math.floor(Math.abs(r0 - r1)))\r\n    {\r\n        /* no solution. one circle is contained in the other */\r\n        return false;\r\n    }\r\n\r\n    /* 'point 2' is the point where the line through the circle\r\n    * intersection points crosses the line between the circle\r\n    * centers.\r\n    */\r\n\r\n    /* Determine the distance from point 0 to point 2. */\r\n    a = ((r0*r0) - (r1*r1) + (d*d)) / (2.0 * d) ;\r\n\r\n    /* Determine the coordinates of point 2. */\r\n    point2_x = x0 + (dx * a/d);\r\n    point2_y = y0 + (dy * a/d);\r\n\r\n    /* Determine the distance from point 2 to either of the\r\n    * intersection points.\r\n    */\r\n    h = Math.sqrt((r0*r0) - (a*a));\r\n\r\n    /* Now determine the offsets of the intersection points from\r\n    * point 2.\r\n    */\r\n    rx = -dy * (h/d);\r\n    ry = dx * (h/d);\r\n\r\n    /* Determine the absolute intersection points. */\r\n    let intersectionPoint1_x = point2_x + rx;\r\n    let intersectionPoint1_y = point2_y + ry;\r\n\r\n\r\n    return {\r\n        x: intersectionPoint1_x,\r\n        y: intersectionPoint1_y\r\n    };\r\n}\r\n\r\nfunction union_arrays (x, y) {\r\n    let res = [];\r\n\r\n    for(let i = 0; i < x.length; i++) {\r\n        for (let j = 0; j < y.length; j++) {\r\n            if (x[i].x === y[j].x && x[i].y === y[j].y || x[i].point) {\r\n                res.push(x[i]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\nfunction getRandomArbitrary(min, max) {\r\n  return Math.floor(Math.random() * (max - min) + min);\r\n}\r\n\r\nmodule.exports = {\r\n  calculateThreeCircleIntersection: calculateThreeCircleIntersection,\r\n  getRandomArbitrary: getRandomArbitrary,\r\n    union_arrays: union_arrays\r\n};\r\n","class Point{\r\n  constructor(color, x, y){\r\n      this.color = color;\r\n      this.x = x;\r\n      this.y = y;\r\n      this.interval = null;\r\n      this.drawOuterinterval = null;\r\n      this.radius = 0;\r\n      this.drawOuter = false;\r\n  }\r\n}\r\n\r\nexport default Point;\r\n","import React, { useRef,useEffect, useState } from 'react'\r\nimport Point from './../class/Point'\r\nimport {calculateThreeCircleIntersection, getRandomArbitrary} from './../functions/functions'\r\n\r\nimport settings from './../settings'\r\n\r\nfunction DecreasingCanvas(props) {\r\n  const canvasRef = useRef(null)\r\n  const [points, setPoints] = useState({\r\n    \"point1\": new Point(\"green\", 0, 0),\r\n    \"point2\": new Point(\"red\", 0,0),\r\n    \"point3\": new Point(\"blue\", 0, 0)})\r\n\r\n  const [goalPoint, setGoalPoint] = useState(new Point(\"black\", 0, 0));\r\n\r\n  // Draws circles\r\n  const draw = (ctx, color, x, y) => {\r\n    ctx.fillStyle = color\r\n    ctx.beginPath()\r\n    ctx.arc(x, y, props.dotSize, 0, 2*Math.PI)\r\n    ctx.fill()\r\n  }\r\n\r\n  const drawOuter = (ctx, key) => {\r\n    ctx.beginPath()\r\n    ctx.arc(points[key].x, points[key].y, points[key].radius, 0, 2*Math.PI);\r\n    ctx.strokeStyle = points[key].color;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n  }\r\n\r\n  // Moves a point\r\n  const movePoint = (point, x, y) => {\r\n    points[point].x = x;\r\n    points[point].y = y;\r\n    setPoints({...points});\r\n  }\r\n\r\n  // Calculate distance to goalpoint\r\n  const calculateDistance = (key) => {\r\n    return Math.sqrt(Math.pow(points[key].x - goalPoint.x, 2) + Math.pow(points[key].y - goalPoint.y, 2))\r\n  }\r\n\r\n  const calculateDistanceXY = (x, y) => {\r\n    return Math.sqrt(Math.pow(x - goalPoint.x, 2) + Math.pow(y - goalPoint.y, 2))\r\n  }\r\n\r\n  const drawOuterPoint = (key) => {\r\n    points[key].drawOuter = true;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const setPointInterval = (key, interval) => {\r\n    points[key].interval = interval;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const setRadius = (key, radius) => {\r\n    points[key].radius = radius;\r\n    setPoints({...points})\r\n  }\r\n\r\n  const setOuterInterval = (key, interval) => {\r\n    points[key].drawOuterinterval = interval;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const clearPointInterval = (key) => {\r\n    if(points[key].interval)\r\n      clearInterval(points[key].interval);\r\n    points[key].interval = null;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const clearOuterInterval = (key) => {\r\n    if(points[key].drawOuterinterval)\r\n      clearInterval(points[key].drawOuterinterval);\r\n    points[key].drawOuterinterval = null;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const allFinished = () => {\r\n    let finished = true;\r\n    for(const item of Object.values(points)){\r\n      finished = finished && (item.interval === null);\r\n    }\r\n    return finished;\r\n  }\r\n\r\n  // Calculate point\r\n  const calculatePoint = (key) => {\r\n    if(calculateDistance(key) > getRandomArbitrary(props.maxDistance - props.errorMargin,props.maxDistance)){\r\n      switch(getDirection(key)){\r\n        case \"RIGHT\":\r\n          movePoint(key, points[key].x + 1, points[key].y + 1);\r\n          break;\r\n        case \"LEFT\":\r\n          movePoint(key, points[key].x - 1, points[key].y + 1);\r\n          break;\r\n        case \"UP\":\r\n          movePoint(key, points[key].x + 1, points[key].y - 1);\r\n          break;\r\n        case \"DOWN\":\r\n          movePoint(key, points[key].x - 1, points[key].y - 1);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    // In range\r\n    else{\r\n        clearPointInterval(key);\r\n        drawOuterPoint(key);\r\n\r\n        // Decrease until intersection of all points\r\n        setOuterInterval(key, setInterval(() => {\r\n            if(points[key].radius > calculateDistance(key)\r\n              && allFinished()) // If all finished\r\n              setRadius(key, points[key].radius - 1);\r\n\r\n              if(points[key].radius <= calculateDistance(key))\r\n                clearOuterInterval(key);\r\n\r\n              if(allFinished() && key === \"point1\"){\r\n                let res = calculateThreeCircleIntersection(points[\"point1\"].x, points[\"point1\"].y, points[\"point1\"].radius,\r\n                    points[\"point2\"].x, points[\"point2\"].y, points[\"point2\"].radius,\r\n                    points[\"point3\"].x, points[\"point3\"].y, points[\"point3\"].radius);\r\n                  props.onGuessedPosition(Math.floor(res.x), Math.floor(res.y));\r\n              }\r\n          }, props.radiusSpeed)\r\n        )\r\n    }\r\n  }\r\n\r\n  // Get direction\r\n  const getDirection = (key) => {\r\n    // is on left side\r\n    if(calculateDistanceXY(points[key].x + 1, points[key].y + 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"RIGHT\";\r\n    else if(calculateDistanceXY(points[key].x - 1, points[key].y + 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"LEFT\";\r\n    else if(calculateDistanceXY(points[key].x + 1, points[key].y - 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"UP\";\r\n    else if(calculateDistanceXY(points[key].x - 1, points[key].y - 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"DOWN\";\r\n  }\r\n\r\n  // INITIALIZES\r\n  useEffect(() => {\r\n    props.onGuessedPosition(null, null);\r\n\r\n    // Randomize Goal point || fixed dot\r\n    if(props.fixedDot){\r\n      goalPoint.x = settings.canvasWidth/2;\r\n      goalPoint.y = settings.canvasHeight/2;\r\n    }\r\n    else{\r\n      goalPoint.x = getRandomArbitrary(settings.boarder, settings.canvasWidth - settings.boarder);\r\n      goalPoint.y = getRandomArbitrary(settings.boarder, settings.canvasHeight - settings.boarder);\r\n    }\r\n\r\n    setGoalPoint(goalPoint);\r\n\r\n    props.onGoalPosition(goalPoint.x, goalPoint.y);\r\n\r\n    // Randomize all points && Start\r\n    var calculatedPoints = {\r\n      \"point1\": {\"x\": 0, \"y\": 0},\r\n      \"point2\": {\"x\": 0, \"y\": 0},\r\n      \"point3\": {\"x\": 0, \"y\": 0},\r\n    };\r\n\r\n    // Calculate point for each\r\n    //// Point 1 random\r\n    calculatedPoints[\"point1\"].x = getRandomArbitrary(settings.boarder, settings.canvasWidth - settings.boarder)\r\n    calculatedPoints[\"point1\"].y = getRandomArbitrary(settings.boarder, settings.canvasHeight - settings.boarder)\r\n\r\n    //// Point 2 on opposite X side\r\n    if(calculatedPoints[\"point1\"].x > goalPoint.x)\r\n      calculatedPoints[\"point2\"].x = getRandomArbitrary(settings.boarder, goalPoint.x - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point2\"].x = getRandomArbitrary(goalPoint.x, settings.canvasWidth - settings.boarder)\r\n    if(calculatedPoints[\"point1\"].y > goalPoint.y)\r\n      calculatedPoints[\"point2\"].y = getRandomArbitrary(goalPoint.y, settings.canvasHeight - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point2\"].y = getRandomArbitrary(settings.boarder, goalPoint.y - settings.boarder)\r\n\r\n    //// Point 3 on opposite Y side\r\n    if(calculatedPoints[\"point1\"].y > goalPoint.y)\r\n      calculatedPoints[\"point3\"].y = getRandomArbitrary(settings.boarder , goalPoint.y - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point3\"].y = getRandomArbitrary(goalPoint.y, settings.canvasHeight - settings.boarder)\r\n    if(calculatedPoints[\"point1\"].x > goalPoint.x)\r\n      calculatedPoints[\"point3\"].x = getRandomArbitrary(settings.boarder, goalPoint.x - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point3\"].x = getRandomArbitrary(goalPoint.x, settings.canvasWidth - settings.boarder)\r\n\r\n    for(const key of Object.keys(points)){\r\n      movePoint(key, calculatedPoints[key].x, calculatedPoints[key].y)\r\n      setRadius(key, props.maxDistance)\r\n\r\n      setPointInterval(key, setInterval(() => {\r\n        calculatePoint(key);\r\n      }, props.speed))\r\n    }\r\n\r\n    // Unmount all\r\n    return () => {\r\n      clearPointInterval(\"point1\");\r\n      clearPointInterval(\"point2\");\r\n      clearPointInterval(\"point3\");\r\n\r\n      clearOuterInterval(\"point1\");\r\n      clearOuterInterval(\"point2\");\r\n      clearOuterInterval(\"point3\");\r\n    }\r\n  }, []);\r\n\r\n  // USED FOR DRAWING\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    const context = canvas.getContext('2d')\r\n    // Overwrite canvas\r\n    context.canvas.width = settings.canvasWidth;\r\n    context.canvas.height = settings.canvasHeight;\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw markers\r\n    for(const [key, item] of Object.entries(points)){\r\n      draw(context, item.color, item.x, item.y)\r\n\r\n      if(points[key].drawOuter){\r\n        drawOuter(context, key);\r\n      }\r\n    }\r\n\r\n    // Draw goal point\r\n    draw(context, goalPoint.color, goalPoint.x, goalPoint.y)\r\n  }, [points])\r\n\r\n  return (\r\n      <canvas ref={canvasRef}/>\r\n  );\r\n}\r\n\r\nexport default DecreasingCanvas;\r\n","import React, { useRef,useEffect, useState } from 'react'\r\nimport Point from './../class/Point'\r\nimport {getRandomArbitrary} from './../functions/functions'\r\n\r\nimport settings from './../settings'\r\n\r\nfunction GridCanvas(props) {\r\n  const canvasRef = useRef(null)\r\n  const [points, setPoints] = useState({\r\n    \"point1\": new Point(\"green\", 0, 0),\r\n    \"point2\": new Point(\"red\", 0,0),\r\n    \"point3\": new Point(\"blue\", 0, 0)})\r\n\r\n  const [goalPoint, setGoalPoint] = useState(new Point(\"black\", 0, 0));\r\n\r\n  const [squaresAroundList, setSquaresAroundList] = useState({});\r\n  const [squareUnion, setSquareUnion] = useState([]);\r\n\r\n  // Draws circles\r\n  const draw = (ctx, color, x, y) => {\r\n    ctx.fillStyle = color\r\n    ctx.beginPath()\r\n    ctx.arc(x, y, props.dotSize, 0, 2*Math.PI)\r\n    ctx.fill()\r\n  }\r\n\r\n  const drawSquare = (ctx, key, x, y) => {\r\n    if(key === \"point1\")\r\n      ctx.fillStyle = \"#8bf38b\";\r\n    else if(key === \"point2\")\r\n      ctx.fillStyle = \"#ff8787\";\r\n    else if(key === \"point3\")\r\n      ctx.fillStyle = \"#6c96ff\";\r\n    else if(key === \"intersect\")\r\n      ctx.fillStyle = \"purple\";\r\n\r\n    ctx.fillRect(x*props.gridSize + 2, y*props.gridSize + 2, props.gridSize - 4, props.gridSize - 4);\r\n  }\r\n\r\n  // Moves a point\r\n  const movePoint = (point, x, y) => {\r\n    points[point].x = x;\r\n    points[point].y = y;\r\n    setPoints({...points});\r\n  }\r\n\r\n  // Calculate distance to goalpoint\r\n  const calculateSquare = (x, y) => {\r\n    return {\r\n      \"x\": Math.floor(x/props.gridSize),\r\n      \"y\": Math.floor(y/props.gridSize)\r\n    }\r\n  }\r\n\r\n  const calculateDistanceSquare = (key) => {\r\n    return Math.sqrt(\r\n      Math.pow(calculateSquare(points[key].x, points[key].y).x - calculateSquare(goalPoint.x, goalPoint.y).x,2)\r\n      +\r\n      Math.pow(calculateSquare(points[key].x, points[key].y).y - calculateSquare(goalPoint.x, goalPoint.y).y,2)\r\n    )\r\n  }\r\n\r\n  const calculateDistanceXY = (x, y) => {\r\n    return Math.sqrt(Math.pow(x - goalPoint.x, 2) + Math.pow(y - goalPoint.y, 2))\r\n  }\r\n\r\n  const setPointInterval = (key, interval) => {\r\n    points[key].interval = interval;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const clearPointInterval = (key) => {\r\n    if(points[key].interval)\r\n      clearInterval(points[key].interval);\r\n    points[key].interval = null;\r\n    setPoints({...points});\r\n  }\r\n\r\n  // Calculate point\r\n  const calculatePoint = (key) => {\r\n    if(calculateDistanceSquare(key) > props.gridDistance + 0.5){\r\n      switch(getDirection(key)){\r\n        case \"RIGHT\":\r\n          movePoint(key, points[key].x + 1, points[key].y + 1);\r\n          break;\r\n        case \"LEFT\":\r\n          movePoint(key, points[key].x - 1, points[key].y + 1);\r\n          break;\r\n        case \"UP\":\r\n          movePoint(key, points[key].x + 1, points[key].y - 1);\r\n          break;\r\n        case \"DOWN\":\r\n          movePoint(key, points[key].x - 1, points[key].y - 1);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    // In range\r\n    else{\r\n        clearPointInterval(key);\r\n        calculateGrid(key);\r\n    }\r\n  }\r\n\r\n  const addToSquareList = (key, squareList) => {\r\n    squaresAroundList[key] = squareList;\r\n    setSquaresAroundList(squaresAroundList);\r\n  }\r\n\r\n  const calculateGrid = (key) => {\r\n    let squarePos = calculateSquare(points[key].x, points[key].y);\r\n    let squaresAround = [];\r\n\r\n    // Top left point\r\n    let startPos = {x: squarePos.x - props.gridDistance, y: squarePos.y - props.gridDistance}\r\n    // Total rows & columns to check\r\n    let toCheck = 3 + 2*(props.gridDistance-1);\r\n\r\n    // Iterate through all squares around\r\n    for(let x = 0; x < toCheck; x++){\r\n      for(let y = 0; y < toCheck; y++){\r\n        let addX = x + startPos.x;\r\n        let addY = y + startPos.y;\r\n\r\n        // skip negative values\r\n        if(addX < 0 || addY < 0)\r\n          continue;\r\n\r\n        // Add to squaresAround\r\n        squaresAround.push({x: addX, y: addY});\r\n      }\r\n    }\r\n    addToSquareList(key, squaresAround);\r\n    if(Object.keys(squaresAroundList).length === 3){\r\n      calculateGridIntersection();\r\n    }\r\n  }\r\n\r\n  const calculateGridIntersection = () => {\r\n    var counts = {};\r\n    squaresAroundList[\"point1\"].forEach(function(x) { counts[JSON.stringify(x)] = (counts[JSON.stringify(x)] || 0)+1; });\r\n    squaresAroundList[\"point2\"].forEach(function(x) { counts[JSON.stringify(x)] = (counts[JSON.stringify(x)] || 0)+1; });\r\n    squaresAroundList[\"point3\"].forEach(function(x) { counts[JSON.stringify(x)] = (counts[JSON.stringify(x)] || 0)+1; });\r\n\r\n    var result = [];\r\n\r\n    for(const [key, item] of Object.entries(counts)){\r\n      if(item === 3)\r\n        result.push(JSON.parse(key));\r\n    }\r\n\r\n    let guessSquare = result[Math.floor(Math.random() * result.length)];\r\n\r\n    let guessPos = {\r\n      x: Math.floor(getRandomArbitrary(guessSquare.x*props.gridSize, (guessSquare.x + 1)*props.gridSize)),\r\n      y: Math.floor(getRandomArbitrary(guessSquare.y*props.gridSize, (guessSquare.y + 1)*props.gridSize))\r\n    }\r\n\r\n    setSquareUnion(result);\r\n\r\n    props.onAroundList(result);\r\n    props.onGuessedPosition(guessPos);\r\n    props.onGuessedSquare(guessSquare);\r\n  }\r\n\r\n  // Get direction\r\n  const getDirection = (key) => {\r\n    // is on left side\r\n    if(calculateDistanceXY(points[key].x + 1, points[key].y + 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"RIGHT\";\r\n    else if(calculateDistanceXY(points[key].x - 1, points[key].y + 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"LEFT\";\r\n    else if(calculateDistanceXY(points[key].x + 1, points[key].y - 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"UP\";\r\n    else if(calculateDistanceXY(points[key].x - 1, points[key].y - 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"DOWN\";\r\n  }\r\n\r\n  // INITIALIZES\r\n  useEffect(() => {\r\n    props.onGuessedPosition({x: null, y: null});\r\n    props.onGuessedSquare({x: null, y: null});\r\n    props.onAroundList([]);\r\n\r\n\r\n    // Randomize Goal point || fixed dot\r\n    if(props.fixedDot){\r\n      goalPoint.x = settings.canvasWidth/2;\r\n      goalPoint.y = settings.canvasHeight/2;\r\n    }\r\n    else{\r\n      goalPoint.x = getRandomArbitrary(settings.boarder, settings.canvasWidth - settings.boarder);\r\n      goalPoint.y = getRandomArbitrary(settings.boarder, settings.canvasHeight - settings.boarder);\r\n    }\r\n\r\n    setGoalPoint(goalPoint);\r\n\r\n    props.onGoalPosition(goalPoint.x, goalPoint.y);\r\n\r\n    // Randomize all points && Start\r\n    var calculatedPoints = {\r\n      \"point1\": {\"x\": 0, \"y\": 0},\r\n      \"point2\": {\"x\": 0, \"y\": 0},\r\n      \"point3\": {\"x\": 0, \"y\": 0},\r\n    }\r\n\r\n    // Calculate point for each\r\n    //// Point 1 random\r\n    calculatedPoints[\"point1\"].x = getRandomArbitrary(settings.boarder, settings.canvasWidth - settings.boarder)\r\n    calculatedPoints[\"point1\"].y = getRandomArbitrary(settings.boarder, settings.canvasHeight - settings.boarder)\r\n\r\n    //// Point 2 on opposite X side\r\n    if(calculatedPoints[\"point1\"].x > goalPoint.x)\r\n      calculatedPoints[\"point2\"].x = getRandomArbitrary(settings.boarder, goalPoint.x - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point2\"].x = getRandomArbitrary(goalPoint.x, settings.canvasWidth - settings.boarder)\r\n    if(calculatedPoints[\"point1\"].y > goalPoint.y)\r\n      calculatedPoints[\"point2\"].y = getRandomArbitrary(goalPoint.y, settings.canvasHeight - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point2\"].y = getRandomArbitrary(settings.boarder, goalPoint.y - settings.boarder)\r\n\r\n    //// Point 3 on opposite Y side\r\n    if(calculatedPoints[\"point1\"].y > goalPoint.y)\r\n      calculatedPoints[\"point3\"].y = getRandomArbitrary(settings.boarder , goalPoint.y - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point3\"].y = getRandomArbitrary(goalPoint.y, settings.canvasHeight - settings.boarder)\r\n    if(calculatedPoints[\"point1\"].x > goalPoint.x)\r\n      calculatedPoints[\"point3\"].x = getRandomArbitrary(settings.boarder, goalPoint.x - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point3\"].x = getRandomArbitrary(goalPoint.x, settings.canvasWidth - settings.boarder)\r\n\r\n    for(const key of Object.keys(points)){\r\n      movePoint(key, calculatedPoints[key].x, calculatedPoints[key].y)\r\n\r\n      setPointInterval(key, setInterval(() => {\r\n        calculatePoint(key);\r\n      }, props.speed))\r\n    }\r\n\r\n    // Unmount all\r\n    return () => {\r\n      clearPointInterval(\"point1\");\r\n      clearPointInterval(\"point2\");\r\n      clearPointInterval(\"point3\");\r\n    }\r\n  }, []);\r\n\r\n  const drawLineGrid = (ctx, x, y) => {\r\n    ctx.strokeStyle = \"black\";\r\n    // vertical lines\r\n    if(y === 0){\r\n      ctx.beginPath();\r\n      ctx.moveTo(x, 0);\r\n      ctx.lineTo(x, settings.canvasHeight);\r\n      ctx.stroke();\r\n    }\r\n    // horizontal lines\r\n    else{\r\n      ctx.beginPath();\r\n      ctx.moveTo(0, y);\r\n      ctx.lineTo(settings.canvasWidth, y);\r\n      ctx.stroke();\r\n    }\r\n  }\r\n\r\n  // USED FOR DRAWING\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    const context = canvas.getContext('2d')\r\n\r\n    // Overwrite canvas\r\n    context.canvas.width = settings.canvasWidth;\r\n    context.canvas.height = settings.canvasHeight;\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    // Draw grid\r\n    for(let i = 0; i < Math.ceil((settings.canvasWidth)/props.gridSize); i++){\r\n      drawLineGrid(context, i*props.gridSize, 0);\r\n    }\r\n\r\n    for(let i = 0; i < Math.ceil((settings.canvasHeight)/props.gridSize); i++){\r\n      drawLineGrid(context, 0, i*props.gridSize);\r\n    }\r\n\r\n    // Draw squares\r\n    for(const key of Object.keys(points)){\r\n      if(squaresAroundList[key]){\r\n        squaresAroundList[key].forEach((item) => {\r\n          drawSquare(context, key, item.x, item.y);\r\n        });\r\n      }\r\n    }\r\n\r\n    if(squareUnion.length > 0){\r\n      squareUnion.forEach((item) => {\r\n        drawSquare(context, \"intersect\", item.x, item.y);\r\n      });\r\n    }\r\n\r\n    // Draw markers\r\n    for(const item of Object.values(points)){\r\n      draw(context, item.color, item.x, item.y)\r\n    }\r\n\r\n    // Draw goal point\r\n    draw(context, goalPoint.color, goalPoint.x, goalPoint.y)\r\n  }, [points, squaresAroundList, squareUnion])\r\n\r\n  return (\r\n    <canvas ref={canvasRef}/>\r\n  );\r\n}\r\n\r\nexport default GridCanvas;\r\n","import React, { useRef,useEffect, useState } from 'react'\r\nimport Point from './../class/Point'\r\nimport {getRandomArbitrary, union_arrays} from './../functions/functions'\r\n\r\nimport settings from './../settings'\r\nimport {Button} from \"react-bootstrap\";\r\n\r\nfunction AreaCanvas(props) {\r\n  const canvasRef = useRef(null);\r\n  const [reRun, setRerun] = useState(false);\r\n  const [points, setPoints] = useState({\r\n    \"point1\": new Point(\"green\", 0, 0),\r\n    \"point2\": new Point(\"red\", 0,0),\r\n    \"point3\": new Point(\"blue\", 0, 0)})\r\n\r\n  const [goalPoint, setGoalPoint] = useState(new Point(\"#070707\", 0, 0));\r\n  const [allPositions, setAllPositions] = useState({list: []});\r\n  const [totalRuns, setTotalruns] = useState({val: 0});\r\n\r\n  // Draws circles\r\n  const draw = (ctx, color, x, y) => {\r\n    ctx.fillStyle = color\r\n    ctx.beginPath()\r\n    ctx.arc(x, y, props.dotSize, 0, 2*Math.PI)\r\n    ctx.fill()\r\n  }\r\n\r\n  const drawCircle = (ctx, point) => {\r\n    ctx.beginPath();\r\n    ctx.arc(point.x, point.y, point.radius, 0, Math.PI * 2);\r\n    ctx.closePath();\r\n    ctx.fillStyle = \"purple\";\r\n    ctx.fill();\r\n  };\r\n\r\n\r\n  var canvas1, ctx1;\r\n\r\n  const drawIntersect = (ctx) => {\r\n    if(ctx1){\r\n      ctx1.clearRect(0, 0, settings.canvasWidth, settings.canvasHeight);\r\n\r\n      ctx1.save()\r\n\r\n      drawCircle(ctx1, points[\"point1\"], \"purple\");\r\n      ctx1.globalCompositeOperation = \"source-in\";\r\n      drawCircle(ctx1, points[\"point2\"], \"purple\");\r\n      drawCircle(ctx1, points[\"point3\"], \"purple\");\r\n      ctx1.globalCompositeOperation = 'destination-out';\r\n\r\n      ctx1.restore();\r\n\r\n      if(ctx){\r\n        ctx.drawImage(canvas1, 0, 0);\r\n      }\r\n    }\r\n\r\n  };\r\n\r\n  const drawOuter = (ctx, key) => {\r\n    ctx.beginPath()\r\n    ctx.arc(points[key].x, points[key].y, points[key].radius, 0, 2*Math.PI);\r\n    ctx.strokeStyle = points[key].color;\r\n    ctx.lineWidth = 2;\r\n    ctx.stroke();\r\n  }\r\n\r\n  // Moves a point\r\n  const movePoint = (point, x, y) => {\r\n    points[point].x = x;\r\n    points[point].y = y;\r\n    setPoints({...points});\r\n  }\r\n\r\n  // Calculate distance to goalpoint\r\n  const calculateDistance = (key) => {\r\n    return Math.sqrt(Math.pow(points[key].x - goalPoint.x, 2) + Math.pow(points[key].y - goalPoint.y, 2))\r\n  }\r\n\r\n  const calculateDistanceXY = (x, y) => {\r\n    return Math.sqrt(Math.pow(x - goalPoint.x, 2) + Math.pow(y - goalPoint.y, 2))\r\n  }\r\n\r\n  const drawOuterPoint = (key) => {\r\n    points[key].drawOuter = true;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const setPointInterval = (key, interval) => {\r\n    points[key].interval = interval;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const setRadius = (key, radius) => {\r\n    points[key].radius = radius;\r\n    setPoints({...points})\r\n  }\r\n\r\n  const clearPointInterval = (key) => {\r\n    if(points[key].interval)\r\n      clearInterval(points[key].interval);\r\n    points[key].interval = null;\r\n    setPoints({...points});\r\n  }\r\n\r\n  const allFinished = () => {\r\n    let finished = true;\r\n    for(const item of Object.values(points)){\r\n      finished = finished && (item.interval === null);\r\n    }\r\n    return finished;\r\n  }\r\n\r\n  // Calculate point\r\n  const calculatePoint = (key) => {\r\n    if(calculateDistance(key) > getRandomArbitrary(props.maxDistance - props.errorMargin,props.maxDistance)){\r\n      switch(getDirection(key)){\r\n        case \"RIGHT\":\r\n          movePoint(key, points[key].x + 1, points[key].y + 1);\r\n          break;\r\n        case \"LEFT\":\r\n          movePoint(key, points[key].x - 1, points[key].y + 1);\r\n          break;\r\n        case \"UP\":\r\n          movePoint(key, points[key].x + 1, points[key].y - 1);\r\n          break;\r\n        case \"DOWN\":\r\n          movePoint(key, points[key].x - 1, points[key].y - 1);\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    // In range\r\n    else{\r\n        clearPointInterval(key);\r\n        drawOuterPoint(key);\r\n        drawIntersect();\r\n\r\n        if(allFinished()){\r\n          calculateArea()\r\n        }\r\n    }\r\n  };\r\n\r\n  const calculateArea = () => {\r\n      if(!canvasRef.current)\r\n        return;\r\n\r\n      const canvas = canvasRef.current;\r\n      const context = canvas.getContext('2d');\r\n\r\n      var imgd = context.getImageData(0, 0 , canvas.width, canvas.height);\r\n      var pix = imgd.data;\r\n\r\n      // Loop over each pixel and invert the color.\r\n      let all_positions = [];\r\n      for (var i = 0; i < pix.length; i += 4) {\r\n        // Add area\r\n        if(pix[i] === 128 && pix[i+2] === 128){\r\n            all_positions.push({\r\n              x: (i / 4) % canvas.width,\r\n              y: Math.floor((i / 4) / canvas.width),\r\n              point: false\r\n            })\r\n        }\r\n        // Add black point\r\n        else if(pix[i] === 7 && pix[i+1] === 7 && pix[i+2] === 7){\r\n          all_positions.push({\r\n            x: (i / 4) % canvas.width,\r\n            y: Math.floor((i / 4) / canvas.width),\r\n            point: true\r\n          })\r\n        }\r\n      }\r\n\r\n    if(totalRuns.val > 1){\r\n      // Keep the union\r\n      all_positions = union_arrays(allPositions.list, all_positions);\r\n\r\n      allPositions.list = all_positions;\r\n    }\r\n\r\n    // check if in list already\r\n    if(all_positions.length > 0)\r\n      props.onGuessedPosition(all_positions[Math.floor(Math.random() * (all_positions.length))]);\r\n    else\r\n      props.onGuessedPosition({x: null, y: null});\r\n\r\n    props.onAllPositions(all_positions);\r\n    setAllPositions({ list: [...all_positions]});\r\n\r\n    if(reRun)\r\n      runAgain();\r\n  };\r\n\r\n  // Get direction\r\n  const getDirection = (key) => {\r\n    // is on left side\r\n    if(calculateDistanceXY(points[key].x + 1, points[key].y + 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"RIGHT\";\r\n    else if(calculateDistanceXY(points[key].x - 1, points[key].y + 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"LEFT\";\r\n    else if(calculateDistanceXY(points[key].x + 1, points[key].y - 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"UP\";\r\n    else if(calculateDistanceXY(points[key].x - 1, points[key].y - 1) < calculateDistanceXY(points[key].x, points[key].y))\r\n      return \"DOWN\";\r\n  }\r\n\r\n  // INITIALIZES\r\n  useEffect(() => {\r\n    // Reset\r\n    runAgain()\r\n\r\n    // Unmount all\r\n    return () => {\r\n      clearPointInterval(\"point1\");\r\n      clearPointInterval(\"point2\");\r\n      clearPointInterval(\"point3\");\r\n    }\r\n  }, []);\r\n\r\n  const simulateRerun = () => {\r\n    setRerun(true);\r\n    runAgain();\r\n  };\r\n\r\n  // USED FOR DRAWING\r\n  useEffect(() => {\r\n    canvas1 = document.getElementById('canvas');\r\n    ctx1 = canvas1.getContext('2d');\r\n\r\n    const canvas = canvasRef.current;\r\n    const context = canvas.getContext('2d');\r\n\r\n    // Overwrite canvas\r\n    context.canvas.width = settings.canvasWidth;\r\n    context.canvas.height = settings.canvasHeight;\r\n    context.clearRect(0, 0, canvas.width, canvas.height);\r\n\r\n    if(points[\"point1\"].drawOuter){\r\n      drawIntersect(context);\r\n    }\r\n\r\n    // Draw markers\r\n    for(const [key, item] of Object.entries(points)){\r\n      draw(context, item.color, item.x, item.y)\r\n\r\n      if(points[key].drawOuter){\r\n        drawOuter(context, key);\r\n      }\r\n    }\r\n\r\n    // Draw goal point\r\n    draw(context, goalPoint.color, goalPoint.x, goalPoint.y)\r\n  }, [points]);\r\n\r\n  const runAgain = () => {\r\n    if(!reRun) {\r\n      props.onGuessedPosition({x: null, y: null});\r\n      props.onAllPositions([]);\r\n\r\n      // Randomize Goal point || fixed dot\r\n      if(props.fixedDot){\r\n        goalPoint.x = settings.canvasWidth/2;\r\n        goalPoint.y = settings.canvasHeight/2;\r\n      }\r\n      else{\r\n        goalPoint.x = getRandomArbitrary(settings.boarder, settings.canvasWidth - settings.boarder);\r\n        goalPoint.y = getRandomArbitrary(settings.boarder, settings.canvasHeight - settings.boarder);\r\n      }\r\n\r\n      setGoalPoint(goalPoint);\r\n\r\n      props.onGoalPosition(goalPoint.x, goalPoint.y);\r\n    }\r\n\r\n    // Randomize all points && Start\r\n    var calculatedPoints = {\r\n      \"point1\": {\"x\": 0, \"y\": 0},\r\n      \"point2\": {\"x\": 0, \"y\": 0},\r\n      \"point3\": {\"x\": 0, \"y\": 0},\r\n    }\r\n\r\n    // Calculate point for each\r\n    //// Point 1 random\r\n    calculatedPoints[\"point1\"].x = getRandomArbitrary(settings.boarder, settings.canvasWidth - settings.boarder)\r\n    calculatedPoints[\"point1\"].y = getRandomArbitrary(settings.boarder, settings.canvasHeight - settings.boarder)\r\n\r\n    //// Point 2 on opposite X side\r\n    if(calculatedPoints[\"point1\"].x > goalPoint.x)\r\n      calculatedPoints[\"point2\"].x = getRandomArbitrary(settings.boarder, goalPoint.x - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point2\"].x = getRandomArbitrary(goalPoint.x, settings.canvasWidth - settings.boarder)\r\n    if(calculatedPoints[\"point1\"].y > goalPoint.y)\r\n      calculatedPoints[\"point2\"].y = getRandomArbitrary(goalPoint.y, settings.canvasHeight - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point2\"].y = getRandomArbitrary(settings.boarder, goalPoint.y - settings.boarder)\r\n\r\n    //// Point 3 on opposite Y side\r\n    if(calculatedPoints[\"point1\"].y > goalPoint.y)\r\n      calculatedPoints[\"point3\"].y = getRandomArbitrary(settings.boarder , goalPoint.y - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point3\"].y = getRandomArbitrary(goalPoint.y, settings.canvasHeight - settings.boarder)\r\n    if(calculatedPoints[\"point1\"].x > goalPoint.x)\r\n      calculatedPoints[\"point3\"].x = getRandomArbitrary(settings.boarder, goalPoint.x - settings.boarder)\r\n    else\r\n      calculatedPoints[\"point3\"].x = getRandomArbitrary(goalPoint.x, settings.canvasWidth - settings.boarder)\r\n\r\n    for(const key of Object.keys(points)){\r\n      movePoint(key, calculatedPoints[key].x, calculatedPoints[key].y)\r\n      setRadius(key, props.maxDistance)\r\n\r\n      setPointInterval(key, setInterval(() => {\r\n        calculatePoint(key);\r\n      }, props.speed))\r\n    }\r\n\r\n    if(totalRuns.val > 1){\r\n      totalRuns.val = totalRuns.val + 1;\r\n    }\r\n    else{\r\n      setTotalruns({val: totalRuns.val + 1});\r\n    }\r\n\r\n    props.onTotalRuns(totalRuns.val);\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <canvas id=\"canvas\" ref={canvasRef}/>\r\n        <Button onClick={simulateRerun}>Simulate rerun of approximation</Button>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default AreaCanvas;\r\n","import './App.css';\r\n\r\nimport React, {  useState } from 'react'\r\n\r\nimport DecreasingCanvas from './components/DecreasingCanvas'\r\nimport GridCanvas from './components/GridCanvas'\r\nimport AreaCanvas from './components/AreaCanvas'\r\n\r\nimport {Button, Container,Form, Row, Col} from 'react-bootstrap'\r\nimport RangeSlider from 'react-bootstrap-range-slider';\r\nimport {ArrowRepeat} from 'react-bootstrap-icons'\r\n\r\nfunction App() {\r\n  const [canvasSet, setCanvasSet] = useState(\"DECREASING\");\r\n\r\n  // SPEED FOR ANIMATION\r\n  const [speed, setSpeed] = useState(10);\r\n  const [radiusSpeed, setRadiusSpeed] = useState(30);\r\n\r\n  const [dotSize, setDotsize] = useState(5);\r\n  const [fixedDot, setFixedDot] = useState(false);\r\n\r\n  // MAX DISTANCE & ERROR MARGIN\r\n  const [maxDistance, setMaxDistance] = useState(100);\r\n  const [errorMargin, setErrorMargin] = useState(200);\r\n\r\n  // GRID VALUES\r\n  const [gridDistance, setGridDistance] = useState(1);\r\n  const [gridSize, setGridSize] = useState(60);\r\n\r\n  // Result\r\n  const [goalPoint, setGoalPoint] = useState({x: null, y: null});\r\n  const [guessedPosition, setGuessedPosition] = useState({x: null, y: null});\r\n  const [guessedSquare, setGuessedSquare] = useState({x: null, y: null});\r\n  const [allPositions2, setAllPositions2] = useState([]);\r\n  const [totalRuns, setTotalruns] = useState(0);\r\n  const [aroundList, setAroundList] = useState([]);\r\n\r\n  const downloadPositions = () => {\r\n    var dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(allPositions2, null, \"\\t\"));\r\n    var downloadAnchorNode = document.createElement('a');\r\n    downloadAnchorNode.setAttribute(\"href\",     dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\",  \"data.json\");\r\n    document.body.appendChild(downloadAnchorNode); // required for firefox\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  }\r\n\r\n  const reload = () => {\r\n    let savedState = canvasSet;\r\n    setCanvasSet(\"RELOAD\");\r\n    setTimeout(() => {\r\n      setCanvasSet(savedState);\r\n    }, 5);\r\n  };\r\n\r\n  // RENDER CANVAS\r\n  var renderCanvas;\r\n\r\n  if (canvasSet === \"DECREASING\"){\r\n    renderCanvas = <div>\r\n      <h1>Intersection Point</h1>\r\n      <i>This method calculates the exact position by decreasing the radius of each point until an intersection of all circles is found.</i>\r\n      <DecreasingCanvas  speed={speed}\r\n                         radiusSpeed={radiusSpeed}\r\n                         maxDistance={maxDistance}\r\n                         errorMargin={errorMargin}\r\n                         dotSize={dotSize}\r\n                         fixedDot={fixedDot}\r\n                         onGoalPosition={(x, y) => setGoalPoint({x: x, y: y})}\r\n                         onGuessedPosition={(x,y) => setGuessedPosition({x: x, y: y})}/>\r\n    </div>\r\n  }\r\n  else if(canvasSet === \"AREA\"){\r\n    renderCanvas = <div>\r\n      <h1>Intersection Area</h1>\r\n      <i>This method randomly guesses a position that is inside of the intersection area of all circles.</i>\r\n      <AreaCanvas  speed={speed}\r\n                                radiusSpeed={radiusSpeed}\r\n                                maxDistance={maxDistance}\r\n                                errorMargin={errorMargin}\r\n                                dotSize={dotSize}\r\n                                fixedDot={fixedDot}\r\n                                onGoalPosition={(x, y) => setGoalPoint({x: x, y: y})}\r\n                                onAllPositions={(list) => setAllPositions2(list)}\r\n                                onGuessedPosition={(pos) => setGuessedPosition(pos)}\r\n                                onTotalRuns={(runs) => setTotalruns(runs)}/>\r\n    </div>\r\n  }\r\n  else if(canvasSet === \"GRID\"){\r\n    renderCanvas = <div>\r\n      <h1>Grid Intersection</h1>\r\n      <i>This method finds the grid that the goal point is located in. It tries to guess the position of the goal point inside this grid.</i>\r\n      <GridCanvas  speed={speed}\r\n                                errorMargin={errorMargin}\r\n                                gridSize={gridSize}\r\n                                gridDistance={gridDistance}\r\n                                dotSize={dotSize}\r\n                                fixedDot={fixedDot}\r\n                                onAroundList={(list) => setAroundList(list)}\r\n                                onGuessedSquare={(sq) => setGuessedSquare(sq)}\r\n                                onGoalPosition={(x, y) => setGoalPoint({x: x, y: y})}\r\n                                onGuessedPosition={(sq) => setGuessedPosition(sq)}/>\r\n    </div>\r\n  }\r\n\r\n  // RENDER INFO FROM CANVAS\r\n  var renderInfo;\r\n  if (canvasSet === \"DECREASING\"){\r\n    renderInfo = <div>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Goal Position\r\n              </Form.Label>\r\n              <Form.Control value={\"(\" + goalPoint.x + \", \" + goalPoint.y + \")\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Guessed Position\r\n              </Form.Label>\r\n              <Form.Control value={\"(\" + guessedPosition.x + \", \" + guessedPosition.y + \")\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  }\r\n  else if(canvasSet === \"AREA\"){\r\n    renderInfo = <div>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Goal Position\r\n              </Form.Label>\r\n              <Form.Control value={\"(\" + goalPoint.x + \", \" + goalPoint.y + \")\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Guessed Position\r\n              </Form.Label>\r\n              <Form.Control value={\"(\" + guessedPosition.x + \", \" + guessedPosition.y + \")\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Total Possible Positions\r\n              </Form.Label>\r\n              <Form.Control value={allPositions2.length} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Rate of guessing right\r\n              </Form.Label>\r\n              <Form.Control value={((allPositions2.length) ? (1/allPositions2.length*100).toFixed(3) : 100) + \"%\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Distance from goal\r\n              </Form.Label>\r\n              <Form.Control value={(allPositions2.length) ? Math.floor(Math.sqrt(Math.pow(guessedPosition.x - goalPoint.x,2) + Math.pow(guessedPosition.y - goalPoint.y,2))): \"\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Total runs\r\n              </Form.Label>\r\n              <Form.Control value={(totalRuns <= 1) ? totalRuns : totalRuns-1} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={12}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                All Points\r\n              </Form.Label><br/>\r\n              <Button block onClick={downloadPositions}>Download</Button>\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  }\r\n  else if(canvasSet === \"GRID\"){\r\n    renderInfo = <div>\r\n      <Container>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Goal Position\r\n              </Form.Label>\r\n              <Form.Control value={\"(\" + goalPoint.x + \", \" + goalPoint.y + \")\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Guessed Position\r\n              </Form.Label>\r\n              <Form.Control value={\"(\" + guessedPosition.x + \", \" + guessedPosition.y + \")\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Rate of guessing right\r\n              </Form.Label>\r\n              <Form.Control value={((aroundList.length) ? 1/(aroundList.length*gridSize*gridSize)*100 : 100).toFixed(3) + \"%\" }disabled />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Guessed square\r\n              </Form.Label>\r\n              <Form.Control value={\"(\" + guessedSquare.x + \", \" + guessedSquare.y + \")\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm={6}>\r\n            <Form.Group>\r\n              <Form.Label>\r\n                Distance\r\n              </Form.Label>\r\n              <Form.Control value={(guessedSquare.x != null) ? Math.floor(Math.sqrt(Math.pow(guessedPosition.x - goalPoint.x,2) + Math.pow(guessedPosition.y - goalPoint.y,2))): \"\"} disabled />\r\n            </Form.Group>\r\n          </Col>\r\n          <Col sm={6}>\r\n            <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n              <Form.Label>Possible Grid Squares</Form.Label>\r\n              <Form.Control as=\"textarea\" value={aroundList.map(e => \"(\" + e.x + \", \" + e.y + \")\").join('\\r\\n')} rows={3} disabled/>\r\n            </Form.Group>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"mt-2 mb-3\">\r\n        <h2>Trilateration Simulation</h2>\r\n        <Button\r\n            onClick={() => setCanvasSet(\"DECREASING\")}\r\n        >Intersection Point</Button>\r\n        <Button\r\n            onClick={() => setCanvasSet(\"AREA\")}\r\n        >Intersection Area</Button>\r\n        <Button\r\n            onClick={() => setCanvasSet(\"GRID\")}\r\n        >Grid intersection</Button>\r\n        <Button\r\n            onClick={() => (reload())}\r\n        ><ArrowRepeat size={22} className=\"ArrowRepeat\" /></Button>\r\n      </div>\r\n      <Container className=\"no\">\r\n        <Row>\r\n          <Col>\r\n            {renderCanvas}\r\n          </Col>\r\n          <Col>\r\n            <h2>Data</h2>\r\n            {renderInfo}\r\n\r\n            <h2 className=\"mt-5\">Settings</h2>\r\n            <Container>\r\n              <Row>\r\n                <Col sm={6}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      Speed\r\n                    </Form.Label>\r\n                    <RangeSlider\r\n                        value={speed}\r\n                        onChange={e => setSpeed(e.target.value)}\r\n                        min={1}\r\n                        max={50}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      Radius Decrease Speed\r\n                    </Form.Label>\r\n                    <RangeSlider\r\n                        value={radiusSpeed}\r\n                        onChange={e => setRadiusSpeed(e.target.value)}\r\n                        min={10}\r\n                        max={100}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col sm={6}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      Max Distance\r\n                    </Form.Label>\r\n                    <RangeSlider\r\n                        value={maxDistance}\r\n                        onChange={e => setMaxDistance(e.target.value)}\r\n                        min={10}\r\n                        max={200}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      Error Margin\r\n                    </Form.Label>\r\n                    <RangeSlider\r\n                        value={errorMargin}\r\n                        onChange={e => setErrorMargin(e.target.value)}\r\n                        min={0}\r\n                        max={300}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col sm={6}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      Grid Size\r\n                    </Form.Label>\r\n                    <RangeSlider\r\n                        value={gridSize}\r\n                        onChange={e => setGridSize(e.target.value)}\r\n                        min={10}\r\n                        max={300}\r\n                        step={30}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      Grid Max Distance\r\n                    </Form.Label>\r\n                    <RangeSlider\r\n                        value={gridDistance}\r\n                        onChange={e => setGridDistance(e.target.value)}\r\n                        min={1}\r\n                        max={3}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <Col sm={6}>\r\n                  <Form.Group>\r\n                    <Form.Label>\r\n                      Dot Size\r\n                    </Form.Label>\r\n                    <RangeSlider\r\n                        value={dotSize}\r\n                        onChange={e => setDotsize(e.target.value)}\r\n                        min={1}\r\n                        max={5}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col sm={6}>\r\n                  <Form.Group className=\"mt-4\">\r\n                    <Form.Check type=\"checkbox\" label=\"Fixed dot\" onChange={e => (setFixedDot(e.target.checked))} />\r\n                  </Form.Group>\r\n                </Col>\r\n              </Row>\r\n            </Container>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'react-bootstrap-range-slider/dist/react-bootstrap-range-slider.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}